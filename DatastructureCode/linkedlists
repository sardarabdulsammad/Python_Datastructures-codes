class Node:
  def __init__(self,value):
    self.value=value
    self.next=None

class Linkedlist:
  def __init__(self,value):
    self.head=Node(value)
    self.tail=self.head
    self.length=1           


  def app_end(self,value):
    newnode=Node(value)
    self.tail.next=newnode
    self.tail=newnode
    self.length+=1

  def pre_pend(self,value):
    newnode =Node(value)
    newnode.next=self.head
    self.head=newnode
    self.length+=1


  def show(self):
    list1=[]
    currentnode=self.head
    while(currentnode!=None):
      list1.append(currentnode.value)
      currentnode=currentnode.next
    return list1 

  def insert(self,index,value):
    newnode=Node(value)
    if index>=self.length:
      self.app_end(value)
      return("Appended at end")
    elif index<=0:
      self.pre_pend(value)
      return("Appended at beginning")
    else:
      previousnode=self.head
      for i in range(0,index-1):
        previousnode=previousnode.next
      currentnode=previousnode.next
      previousnode.next=newnode
      newnode.next=currentnode
      self.length+=1
      return("done")
        
  def remove(self,index):
    if(index<0):
      return("index out of range")
    elif index==0:
      head=self.head
      newhead=head.next
      self.head=newhead
      self.length-=1
    elif(index>self.length):
      return("index out of range")
    else:   
     previousnode=self.head
     for i in range(0,index-1):
       previousnode=previousnode.next
     node_to_del=previousnode.next
     tobeattached=node_to_del.next
     previousnode.next=tobeattached
     self.length-=1
     return("Done")








#initalizing
linklist=Linkedlist(5)
linklist.show()

#appendingO(1)
linklist.app_end(55)
linklist.show()


#prependingO(1)
linklist.pre_pend(1)
linklist.show()


#insertingO(n)
linklist.insert(2,3)
linklist.show()



#deletingO(n)
linklist.remove(2)
linklist.show()
linklist.remove(0)
linklist.show()

